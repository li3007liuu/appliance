package greendao;

import java.util.List;
import com.splxtech.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.splxtech.dao.ApplianceDao;
import com.splxtech.dao.WasteTypeBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table WASTE_TYPE_BEAN.
 */
public class WasteTypeBean implements java.io.Serializable {

    private Long id;
    private Integer DataYear;
    private Integer DataMouth;
    private Integer DataDay;
    private Integer UseNum;
    private Integer UseTime;
    private Integer PowerWaste;
    private Integer TimeWaste1;
    private Integer TimeWaste2;
    private Integer TimeWaste3;
    private Integer TimeWaste4;
    private Integer TimeWaste5;
    private Integer TimeWaste6;
    private Integer TimeWaste7;
    private Integer TimeWaste8;
    private Integer TimeWaste9;
    private Integer TimeWaste10;
    private Integer TimeWaste11;
    private Integer TimeWaste12;
    private Long typeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WasteTypeBeanDao myDao;

    private Appliance appliance;
    private Long appliance__resolvedKey;

    private List<WasteTypeBean> wastes;

    public WasteTypeBean() {
    }

    public WasteTypeBean(Long id) {
        this.id = id;
    }

    public WasteTypeBean(Long id, Integer DataYear, Integer DataMouth, Integer DataDay, Integer UseNum, Integer UseTime, Integer PowerWaste, Integer TimeWaste1, Integer TimeWaste2, Integer TimeWaste3, Integer TimeWaste4, Integer TimeWaste5, Integer TimeWaste6, Integer TimeWaste7, Integer TimeWaste8, Integer TimeWaste9, Integer TimeWaste10, Integer TimeWaste11, Integer TimeWaste12, Long typeId) {
        this.id = id;
        this.DataYear = DataYear;
        this.DataMouth = DataMouth;
        this.DataDay = DataDay;
        this.UseNum = UseNum;
        this.UseTime = UseTime;
        this.PowerWaste = PowerWaste;
        this.TimeWaste1 = TimeWaste1;
        this.TimeWaste2 = TimeWaste2;
        this.TimeWaste3 = TimeWaste3;
        this.TimeWaste4 = TimeWaste4;
        this.TimeWaste5 = TimeWaste5;
        this.TimeWaste6 = TimeWaste6;
        this.TimeWaste7 = TimeWaste7;
        this.TimeWaste8 = TimeWaste8;
        this.TimeWaste9 = TimeWaste9;
        this.TimeWaste10 = TimeWaste10;
        this.TimeWaste11 = TimeWaste11;
        this.TimeWaste12 = TimeWaste12;
        this.typeId = typeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWasteTypeBeanDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getDataYear() {
        return DataYear;
    }

    public void setDataYear(Integer DataYear) {
        this.DataYear = DataYear;
    }

    public Integer getDataMouth() {
        return DataMouth;
    }

    public void setDataMouth(Integer DataMouth) {
        this.DataMouth = DataMouth;
    }

    public Integer getDataDay() {
        return DataDay;
    }

    public void setDataDay(Integer DataDay) {
        this.DataDay = DataDay;
    }

    public Integer getUseNum() {
        return UseNum;
    }

    public void setUseNum(Integer UseNum) {
        this.UseNum = UseNum;
    }

    public Integer getUseTime() {
        return UseTime;
    }

    public void setUseTime(Integer UseTime) {
        this.UseTime = UseTime;
    }

    public Integer getPowerWaste() {
        return PowerWaste;
    }

    public void setPowerWaste(Integer PowerWaste) {
        this.PowerWaste = PowerWaste;
    }

    public Integer getTimeWaste1() {
        return TimeWaste1;
    }

    public void setTimeWaste1(Integer TimeWaste1) {
        this.TimeWaste1 = TimeWaste1;
    }

    public Integer getTimeWaste2() {
        return TimeWaste2;
    }

    public void setTimeWaste2(Integer TimeWaste2) {
        this.TimeWaste2 = TimeWaste2;
    }

    public Integer getTimeWaste3() {
        return TimeWaste3;
    }

    public void setTimeWaste3(Integer TimeWaste3) {
        this.TimeWaste3 = TimeWaste3;
    }

    public Integer getTimeWaste4() {
        return TimeWaste4;
    }

    public void setTimeWaste4(Integer TimeWaste4) {
        this.TimeWaste4 = TimeWaste4;
    }

    public Integer getTimeWaste5() {
        return TimeWaste5;
    }

    public void setTimeWaste5(Integer TimeWaste5) {
        this.TimeWaste5 = TimeWaste5;
    }

    public Integer getTimeWaste6() {
        return TimeWaste6;
    }

    public void setTimeWaste6(Integer TimeWaste6) {
        this.TimeWaste6 = TimeWaste6;
    }

    public Integer getTimeWaste7() {
        return TimeWaste7;
    }

    public void setTimeWaste7(Integer TimeWaste7) {
        this.TimeWaste7 = TimeWaste7;
    }

    public Integer getTimeWaste8() {
        return TimeWaste8;
    }

    public void setTimeWaste8(Integer TimeWaste8) {
        this.TimeWaste8 = TimeWaste8;
    }

    public Integer getTimeWaste9() {
        return TimeWaste9;
    }

    public void setTimeWaste9(Integer TimeWaste9) {
        this.TimeWaste9 = TimeWaste9;
    }

    public Integer getTimeWaste10() {
        return TimeWaste10;
    }

    public void setTimeWaste10(Integer TimeWaste10) {
        this.TimeWaste10 = TimeWaste10;
    }

    public Integer getTimeWaste11() {
        return TimeWaste11;
    }

    public void setTimeWaste11(Integer TimeWaste11) {
        this.TimeWaste11 = TimeWaste11;
    }

    public Integer getTimeWaste12() {
        return TimeWaste12;
    }

    public void setTimeWaste12(Integer TimeWaste12) {
        this.TimeWaste12 = TimeWaste12;
    }

    public Long getTypeId() {
        return typeId;
    }

    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    /** To-one relationship, resolved on first access. */
    public Appliance getAppliance() {
        Long __key = this.typeId;
        if (appliance__resolvedKey == null || !appliance__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ApplianceDao targetDao = daoSession.getApplianceDao();
            Appliance applianceNew = targetDao.load(__key);
            synchronized (this) {
                appliance = applianceNew;
            	appliance__resolvedKey = __key;
            }
        }
        return appliance;
    }

    public void setAppliance(Appliance appliance) {
        synchronized (this) {
            this.appliance = appliance;
            typeId = appliance == null ? null : appliance.getId();
            appliance__resolvedKey = typeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<WasteTypeBean> getWastes() {
        if (wastes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WasteTypeBeanDao targetDao = daoSession.getWasteTypeBeanDao();
            List<WasteTypeBean> wastesNew = targetDao._queryWasteTypeBean_Wastes(id);
            synchronized (this) {
                if(wastes == null) {
                    wastes = wastesNew;
                }
            }
        }
        return wastes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetWastes() {
        wastes = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
