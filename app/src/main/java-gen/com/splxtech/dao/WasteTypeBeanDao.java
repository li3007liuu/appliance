package com.splxtech.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.Appliance;

import greendao.WasteTypeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WASTE_TYPE_BEAN.
*/
public class WasteTypeBeanDao extends AbstractDao<WasteTypeBean, Long> {

    public static final String TABLENAME = "WASTE_TYPE_BEAN";

    /**
     * Properties of entity WasteTypeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DataYear = new Property(1, Integer.class, "DataYear", false, "DATA_YEAR");
        public final static Property DataMouth = new Property(2, Integer.class, "DataMouth", false, "DATA_MOUTH");
        public final static Property DataDay = new Property(3, Integer.class, "DataDay", false, "DATA_DAY");
        public final static Property UseNum = new Property(4, Integer.class, "UseNum", false, "USE_NUM");
        public final static Property UseTime = new Property(5, Integer.class, "UseTime", false, "USE_TIME");
        public final static Property PowerWaste = new Property(6, Integer.class, "PowerWaste", false, "POWER_WASTE");
        public final static Property TimeWaste1 = new Property(7, Integer.class, "TimeWaste1", false, "TIME_WASTE1");
        public final static Property TimeWaste2 = new Property(8, Integer.class, "TimeWaste2", false, "TIME_WASTE2");
        public final static Property TimeWaste3 = new Property(9, Integer.class, "TimeWaste3", false, "TIME_WASTE3");
        public final static Property TimeWaste4 = new Property(10, Integer.class, "TimeWaste4", false, "TIME_WASTE4");
        public final static Property TimeWaste5 = new Property(11, Integer.class, "TimeWaste5", false, "TIME_WASTE5");
        public final static Property TimeWaste6 = new Property(12, Integer.class, "TimeWaste6", false, "TIME_WASTE6");
        public final static Property TimeWaste7 = new Property(13, Integer.class, "TimeWaste7", false, "TIME_WASTE7");
        public final static Property TimeWaste8 = new Property(14, Integer.class, "TimeWaste8", false, "TIME_WASTE8");
        public final static Property TimeWaste9 = new Property(15, Integer.class, "TimeWaste9", false, "TIME_WASTE9");
        public final static Property TimeWaste10 = new Property(16, Integer.class, "TimeWaste10", false, "TIME_WASTE10");
        public final static Property TimeWaste11 = new Property(17, Integer.class, "TimeWaste11", false, "TIME_WASTE11");
        public final static Property TimeWaste12 = new Property(18, Integer.class, "TimeWaste12", false, "TIME_WASTE12");
        public final static Property TypeId = new Property(19, Long.class, "typeId", false, "TYPE_ID");
    };

    private DaoSession daoSession;

    private Query<WasteTypeBean> wasteTypeBean_WastesQuery;

    public WasteTypeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WasteTypeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WASTE_TYPE_BEAN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DATA_YEAR' INTEGER," + // 1: DataYear
                "'DATA_MOUTH' INTEGER," + // 2: DataMouth
                "'DATA_DAY' INTEGER," + // 3: DataDay
                "'USE_NUM' INTEGER," + // 4: UseNum
                "'USE_TIME' INTEGER," + // 5: UseTime
                "'POWER_WASTE' INTEGER," + // 6: PowerWaste
                "'TIME_WASTE1' INTEGER," + // 7: TimeWaste1
                "'TIME_WASTE2' INTEGER," + // 8: TimeWaste2
                "'TIME_WASTE3' INTEGER," + // 9: TimeWaste3
                "'TIME_WASTE4' INTEGER," + // 10: TimeWaste4
                "'TIME_WASTE5' INTEGER," + // 11: TimeWaste5
                "'TIME_WASTE6' INTEGER," + // 12: TimeWaste6
                "'TIME_WASTE7' INTEGER," + // 13: TimeWaste7
                "'TIME_WASTE8' INTEGER," + // 14: TimeWaste8
                "'TIME_WASTE9' INTEGER," + // 15: TimeWaste9
                "'TIME_WASTE10' INTEGER," + // 16: TimeWaste10
                "'TIME_WASTE11' INTEGER," + // 17: TimeWaste11
                "'TIME_WASTE12' INTEGER," + // 18: TimeWaste12
                "'TYPE_ID' INTEGER);"); // 19: typeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WASTE_TYPE_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WasteTypeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer DataYear = entity.getDataYear();
        if (DataYear != null) {
            stmt.bindLong(2, DataYear);
        }
 
        Integer DataMouth = entity.getDataMouth();
        if (DataMouth != null) {
            stmt.bindLong(3, DataMouth);
        }
 
        Integer DataDay = entity.getDataDay();
        if (DataDay != null) {
            stmt.bindLong(4, DataDay);
        }
 
        Integer UseNum = entity.getUseNum();
        if (UseNum != null) {
            stmt.bindLong(5, UseNum);
        }
 
        Integer UseTime = entity.getUseTime();
        if (UseTime != null) {
            stmt.bindLong(6, UseTime);
        }
 
        Integer PowerWaste = entity.getPowerWaste();
        if (PowerWaste != null) {
            stmt.bindLong(7, PowerWaste);
        }
 
        Integer TimeWaste1 = entity.getTimeWaste1();
        if (TimeWaste1 != null) {
            stmt.bindLong(8, TimeWaste1);
        }
 
        Integer TimeWaste2 = entity.getTimeWaste2();
        if (TimeWaste2 != null) {
            stmt.bindLong(9, TimeWaste2);
        }
 
        Integer TimeWaste3 = entity.getTimeWaste3();
        if (TimeWaste3 != null) {
            stmt.bindLong(10, TimeWaste3);
        }
 
        Integer TimeWaste4 = entity.getTimeWaste4();
        if (TimeWaste4 != null) {
            stmt.bindLong(11, TimeWaste4);
        }
 
        Integer TimeWaste5 = entity.getTimeWaste5();
        if (TimeWaste5 != null) {
            stmt.bindLong(12, TimeWaste5);
        }
 
        Integer TimeWaste6 = entity.getTimeWaste6();
        if (TimeWaste6 != null) {
            stmt.bindLong(13, TimeWaste6);
        }
 
        Integer TimeWaste7 = entity.getTimeWaste7();
        if (TimeWaste7 != null) {
            stmt.bindLong(14, TimeWaste7);
        }
 
        Integer TimeWaste8 = entity.getTimeWaste8();
        if (TimeWaste8 != null) {
            stmt.bindLong(15, TimeWaste8);
        }
 
        Integer TimeWaste9 = entity.getTimeWaste9();
        if (TimeWaste9 != null) {
            stmt.bindLong(16, TimeWaste9);
        }
 
        Integer TimeWaste10 = entity.getTimeWaste10();
        if (TimeWaste10 != null) {
            stmt.bindLong(17, TimeWaste10);
        }
 
        Integer TimeWaste11 = entity.getTimeWaste11();
        if (TimeWaste11 != null) {
            stmt.bindLong(18, TimeWaste11);
        }
 
        Integer TimeWaste12 = entity.getTimeWaste12();
        if (TimeWaste12 != null) {
            stmt.bindLong(19, TimeWaste12);
        }
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(20, typeId);
        }
    }

    @Override
    protected void attachEntity(WasteTypeBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WasteTypeBean readEntity(Cursor cursor, int offset) {
        WasteTypeBean entity = new WasteTypeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // DataYear
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // DataMouth
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // DataDay
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // UseNum
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // UseTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // PowerWaste
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // TimeWaste1
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // TimeWaste2
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // TimeWaste3
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // TimeWaste4
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // TimeWaste5
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // TimeWaste6
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // TimeWaste7
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // TimeWaste8
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // TimeWaste9
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // TimeWaste10
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // TimeWaste11
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // TimeWaste12
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19) // typeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WasteTypeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDataYear(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDataMouth(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDataDay(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUseNum(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUseTime(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPowerWaste(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTimeWaste1(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTimeWaste2(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTimeWaste3(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setTimeWaste4(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setTimeWaste5(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setTimeWaste6(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setTimeWaste7(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setTimeWaste8(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setTimeWaste9(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setTimeWaste10(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setTimeWaste11(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setTimeWaste12(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setTypeId(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WasteTypeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WasteTypeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "wastes" to-many relationship of WasteTypeBean. */
    public List<WasteTypeBean> _queryWasteTypeBean_Wastes(Long typeId) {
        synchronized (this) {
            if (wasteTypeBean_WastesQuery == null) {
                QueryBuilder<WasteTypeBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TypeId.eq(null));
                wasteTypeBean_WastesQuery = queryBuilder.build();
            }
        }
        Query<WasteTypeBean> query = wasteTypeBean_WastesQuery.forCurrentThread();
        query.setParameter(0, typeId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getApplianceDao().getAllColumns());
            builder.append(" FROM WASTE_TYPE_BEAN T");
            builder.append(" LEFT JOIN APPLIANCE T0 ON T.'TYPE_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected WasteTypeBean loadCurrentDeep(Cursor cursor, boolean lock) {
        WasteTypeBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Appliance appliance = loadCurrentOther(daoSession.getApplianceDao(), cursor, offset);
        entity.setAppliance(appliance);

        return entity;    
    }

    public WasteTypeBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<WasteTypeBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<WasteTypeBean> list = new ArrayList<WasteTypeBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<WasteTypeBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<WasteTypeBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
